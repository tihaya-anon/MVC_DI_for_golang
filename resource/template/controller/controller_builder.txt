package {{.entity}}_controller_builder

import (
  "{{.pkg}}/section/{{.entity}}/service"
  {{.entity}}_controller "{{.pkg}}/section/{{.entity}}/controller"
)

func (b *{{.TableName}}ControllerBuilder) Build() *{{.entity}}_controller.{{.TableName}}Controller {
  if b.{{.tableName}}Controller.{{.TableName}}Service == nil && b.isStrict {
    panic("`{{.TableName}}Service` is required")
  }
  return b.{{.tableName}}Controller
}

func (b *{{.TableName}}ControllerBuilder) With{{.TableName}}Service({{.tableName}}Service {{.entity}}_service.{{.TableName}}Service) *{{.TableName}}ControllerBuilder {
  b.{{.tableName}}Controller.{{.TableName}}Service = {{.tableName}}Service
  return b
}


// BUILDER
type {{.TableName}}ControllerBuilder struct {
  isStrict bool
  {{.tableName}}Controller *{{.entity}}_controller.{{.TableName}}Controller
}

func New{{.TableName}}ControllerBuilder() *{{.TableName}}ControllerBuilder {
  return &{{.TableName}}ControllerBuilder{
    isStrict: false,
    {{.tableName}}Controller: &{{.entity}}_controller.{{.TableName}}Controller{},
  }
}

func (b *{{.TableName}}ControllerBuilder) UseStrict() *{{.TableName}}ControllerBuilder { 
  b.isStrict = true
  return b
}