package builder

import (
	"{{.pkg}}/section/{{.entity}}/service"
	"{{.pkg}}/section/{{.entity}}/service/impl"
	"{{.pkg}}/section/{{.entity}}/mapper"
)

func (b *{{.TableName}}ServiceBuilder) Build() service.{{.TableName}}Service {
	if b.{{.tableName}}ServiceImpl.{{.TableName}}Mapper == nil && b.isStrict {
		panic("`{{.TableName}}Mapper` is required")
	}
	return b.{{.tableName}}ServiceImpl
}

func (b *{{.TableName}}ServiceBuilder) With{{.TableName}}Mapper(mapper mapper.{{.TableName}}Mapper) *{{.TableName}}ServiceBuilder {
	b.{{.tableName}}ServiceImpl.{{.TableName}}Mapper = mapper
	return b
}

// BUILDER
type {{.TableName}}ServiceBuilder struct {
  isStrict bool
	{{.tableName}}ServiceImpl *impl.{{.TableName}}ServiceImpl
}

func New{{.TableName}}ServiceBuilder() *{{.TableName}}ServiceBuilder {
	return &{{.TableName}}ServiceBuilder{
		{{.tableName}}ServiceImpl: &impl.{{.TableName}}ServiceImpl{},
	}
}

func (b *{{.TableName}}ServiceBuilder) UseStrict() *{{.TableName}}ServiceBuilder { 
  b.isStrict = true
  return b
}