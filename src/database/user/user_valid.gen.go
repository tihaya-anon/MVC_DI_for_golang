// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"MVC_DI/section/user/model"
)

func newUserValid(db *gorm.DB, opts ...gen.DOOption) userValid {
	_userValid := userValid{}

	_userValid.userValidDo.UseDB(db, opts...)
	_userValid.userValidDo.UseModel(&model.UserValid{})

	tableName := _userValid.userValidDo.TableName()
	_userValid.ALL = field.NewAsterisk(tableName)
	_userValid.ID = field.NewInt64(tableName, "id")
	_userValid.IsDelete = field.NewBool(tableName, "is_delete")
	_userValid.HideUntil = field.NewTime(tableName, "hide_until")

	_userValid.fillFieldMap()

	return _userValid
}

type userValid struct {
	userValidDo

	ALL       field.Asterisk
	ID        field.Int64
	IsDelete  field.Bool
	HideUntil field.Time

	fieldMap map[string]field.Expr
}

func (u userValid) Table(newTableName string) *userValid {
	u.userValidDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userValid) As(alias string) *userValid {
	u.userValidDo.DO = *(u.userValidDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userValid) updateTableName(table string) *userValid {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.IsDelete = field.NewBool(table, "is_delete")
	u.HideUntil = field.NewTime(table, "hide_until")

	u.fillFieldMap()

	return u
}

func (u *userValid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userValid) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["is_delete"] = u.IsDelete
	u.fieldMap["hide_until"] = u.HideUntil
}

func (u userValid) clone(db *gorm.DB) userValid {
	u.userValidDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userValid) replaceDB(db *gorm.DB) userValid {
	u.userValidDo.ReplaceDB(db)
	return u
}

type userValidDo struct{ gen.DO }

type IUserValidDo interface {
	gen.SubQuery
	Debug() IUserValidDo
	WithContext(ctx context.Context) IUserValidDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserValidDo
	WriteDB() IUserValidDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserValidDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserValidDo
	Not(conds ...gen.Condition) IUserValidDo
	Or(conds ...gen.Condition) IUserValidDo
	Select(conds ...field.Expr) IUserValidDo
	Where(conds ...gen.Condition) IUserValidDo
	Order(conds ...field.Expr) IUserValidDo
	Distinct(cols ...field.Expr) IUserValidDo
	Omit(cols ...field.Expr) IUserValidDo
	Join(table schema.Tabler, on ...field.Expr) IUserValidDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserValidDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserValidDo
	Group(cols ...field.Expr) IUserValidDo
	Having(conds ...gen.Condition) IUserValidDo
	Limit(limit int) IUserValidDo
	Offset(offset int) IUserValidDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserValidDo
	Unscoped() IUserValidDo
	Create(values ...*model.UserValid) error
	CreateInBatches(values []*model.UserValid, batchSize int) error
	Save(values ...*model.UserValid) error
	First() (*model.UserValid, error)
	Take() (*model.UserValid, error)
	Last() (*model.UserValid, error)
	Find() ([]*model.UserValid, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserValid, err error)
	FindInBatches(result *[]*model.UserValid, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserValid) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserValidDo
	Assign(attrs ...field.AssignExpr) IUserValidDo
	Joins(fields ...field.RelationField) IUserValidDo
	Preload(fields ...field.RelationField) IUserValidDo
	FirstOrInit() (*model.UserValid, error)
	FirstOrCreate() (*model.UserValid, error)
	FindByPage(offset int, limit int) (result []*model.UserValid, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserValidDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userValidDo) Debug() IUserValidDo {
	return u.withDO(u.DO.Debug())
}

func (u userValidDo) WithContext(ctx context.Context) IUserValidDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userValidDo) ReadDB() IUserValidDo {
	return u.Clauses(dbresolver.Read)
}

func (u userValidDo) WriteDB() IUserValidDo {
	return u.Clauses(dbresolver.Write)
}

func (u userValidDo) Session(config *gorm.Session) IUserValidDo {
	return u.withDO(u.DO.Session(config))
}

func (u userValidDo) Clauses(conds ...clause.Expression) IUserValidDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userValidDo) Returning(value interface{}, columns ...string) IUserValidDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userValidDo) Not(conds ...gen.Condition) IUserValidDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userValidDo) Or(conds ...gen.Condition) IUserValidDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userValidDo) Select(conds ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userValidDo) Where(conds ...gen.Condition) IUserValidDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userValidDo) Order(conds ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userValidDo) Distinct(cols ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userValidDo) Omit(cols ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userValidDo) Join(table schema.Tabler, on ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userValidDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userValidDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userValidDo) Group(cols ...field.Expr) IUserValidDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userValidDo) Having(conds ...gen.Condition) IUserValidDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userValidDo) Limit(limit int) IUserValidDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userValidDo) Offset(offset int) IUserValidDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userValidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserValidDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userValidDo) Unscoped() IUserValidDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userValidDo) Create(values ...*model.UserValid) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userValidDo) CreateInBatches(values []*model.UserValid, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userValidDo) Save(values ...*model.UserValid) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userValidDo) First() (*model.UserValid, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserValid), nil
	}
}

func (u userValidDo) Take() (*model.UserValid, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserValid), nil
	}
}

func (u userValidDo) Last() (*model.UserValid, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserValid), nil
	}
}

func (u userValidDo) Find() ([]*model.UserValid, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserValid), err
}

func (u userValidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserValid, err error) {
	buf := make([]*model.UserValid, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userValidDo) FindInBatches(result *[]*model.UserValid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userValidDo) Attrs(attrs ...field.AssignExpr) IUserValidDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userValidDo) Assign(attrs ...field.AssignExpr) IUserValidDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userValidDo) Joins(fields ...field.RelationField) IUserValidDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userValidDo) Preload(fields ...field.RelationField) IUserValidDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userValidDo) FirstOrInit() (*model.UserValid, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserValid), nil
	}
}

func (u userValidDo) FirstOrCreate() (*model.UserValid, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserValid), nil
	}
}

func (u userValidDo) FindByPage(offset int, limit int) (result []*model.UserValid, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userValidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userValidDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userValidDo) Delete(models ...*model.UserValid) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userValidDo) withDO(do gen.Dao) *userValidDo {
	u.DO = *do.(*gen.DO)
	return u
}
