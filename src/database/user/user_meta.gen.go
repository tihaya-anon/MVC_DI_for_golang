// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"MVC_DI/section/user/model"
)

func newUserMetum(db *gorm.DB, opts ...gen.DOOption) userMetum {
	_userMetum := userMetum{}

	_userMetum.userMetumDo.UseDB(db, opts...)
	_userMetum.userMetumDo.UseModel(&model.UserMetum{})

	tableName := _userMetum.userMetumDo.TableName()
	_userMetum.ALL = field.NewAsterisk(tableName)
	_userMetum.ID = field.NewInt64(tableName, "id")
	_userMetum.Username = field.NewString(tableName, "username")
	_userMetum.School = field.NewString(tableName, "school")

	_userMetum.fillFieldMap()

	return _userMetum
}

type userMetum struct {
	userMetumDo

	ALL      field.Asterisk
	ID       field.Int64
	Username field.String
	School   field.String

	fieldMap map[string]field.Expr
}

func (u userMetum) Table(newTableName string) *userMetum {
	u.userMetumDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userMetum) As(alias string) *userMetum {
	u.userMetumDo.DO = *(u.userMetumDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userMetum) updateTableName(table string) *userMetum {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.School = field.NewString(table, "school")

	u.fillFieldMap()

	return u
}

func (u *userMetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userMetum) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["school"] = u.School
}

func (u userMetum) clone(db *gorm.DB) userMetum {
	u.userMetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userMetum) replaceDB(db *gorm.DB) userMetum {
	u.userMetumDo.ReplaceDB(db)
	return u
}

type userMetumDo struct{ gen.DO }

type IUserMetumDo interface {
	gen.SubQuery
	Debug() IUserMetumDo
	WithContext(ctx context.Context) IUserMetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserMetumDo
	WriteDB() IUserMetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserMetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserMetumDo
	Not(conds ...gen.Condition) IUserMetumDo
	Or(conds ...gen.Condition) IUserMetumDo
	Select(conds ...field.Expr) IUserMetumDo
	Where(conds ...gen.Condition) IUserMetumDo
	Order(conds ...field.Expr) IUserMetumDo
	Distinct(cols ...field.Expr) IUserMetumDo
	Omit(cols ...field.Expr) IUserMetumDo
	Join(table schema.Tabler, on ...field.Expr) IUserMetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserMetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserMetumDo
	Group(cols ...field.Expr) IUserMetumDo
	Having(conds ...gen.Condition) IUserMetumDo
	Limit(limit int) IUserMetumDo
	Offset(offset int) IUserMetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMetumDo
	Unscoped() IUserMetumDo
	Create(values ...*model.UserMetum) error
	CreateInBatches(values []*model.UserMetum, batchSize int) error
	Save(values ...*model.UserMetum) error
	First() (*model.UserMetum, error)
	Take() (*model.UserMetum, error)
	Last() (*model.UserMetum, error)
	Find() ([]*model.UserMetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserMetum, err error)
	FindInBatches(result *[]*model.UserMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserMetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserMetumDo
	Assign(attrs ...field.AssignExpr) IUserMetumDo
	Joins(fields ...field.RelationField) IUserMetumDo
	Preload(fields ...field.RelationField) IUserMetumDo
	FirstOrInit() (*model.UserMetum, error)
	FirstOrCreate() (*model.UserMetum, error)
	FindByPage(offset int, limit int) (result []*model.UserMetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserMetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userMetumDo) Debug() IUserMetumDo {
	return u.withDO(u.DO.Debug())
}

func (u userMetumDo) WithContext(ctx context.Context) IUserMetumDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userMetumDo) ReadDB() IUserMetumDo {
	return u.Clauses(dbresolver.Read)
}

func (u userMetumDo) WriteDB() IUserMetumDo {
	return u.Clauses(dbresolver.Write)
}

func (u userMetumDo) Session(config *gorm.Session) IUserMetumDo {
	return u.withDO(u.DO.Session(config))
}

func (u userMetumDo) Clauses(conds ...clause.Expression) IUserMetumDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userMetumDo) Returning(value interface{}, columns ...string) IUserMetumDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userMetumDo) Not(conds ...gen.Condition) IUserMetumDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userMetumDo) Or(conds ...gen.Condition) IUserMetumDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userMetumDo) Select(conds ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userMetumDo) Where(conds ...gen.Condition) IUserMetumDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userMetumDo) Order(conds ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userMetumDo) Distinct(cols ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userMetumDo) Omit(cols ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userMetumDo) Join(table schema.Tabler, on ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userMetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userMetumDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userMetumDo) Group(cols ...field.Expr) IUserMetumDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userMetumDo) Having(conds ...gen.Condition) IUserMetumDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userMetumDo) Limit(limit int) IUserMetumDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userMetumDo) Offset(offset int) IUserMetumDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userMetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMetumDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userMetumDo) Unscoped() IUserMetumDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userMetumDo) Create(values ...*model.UserMetum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userMetumDo) CreateInBatches(values []*model.UserMetum, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userMetumDo) Save(values ...*model.UserMetum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userMetumDo) First() (*model.UserMetum, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMetum), nil
	}
}

func (u userMetumDo) Take() (*model.UserMetum, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMetum), nil
	}
}

func (u userMetumDo) Last() (*model.UserMetum, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMetum), nil
	}
}

func (u userMetumDo) Find() ([]*model.UserMetum, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserMetum), err
}

func (u userMetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserMetum, err error) {
	buf := make([]*model.UserMetum, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userMetumDo) FindInBatches(result *[]*model.UserMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userMetumDo) Attrs(attrs ...field.AssignExpr) IUserMetumDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userMetumDo) Assign(attrs ...field.AssignExpr) IUserMetumDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userMetumDo) Joins(fields ...field.RelationField) IUserMetumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userMetumDo) Preload(fields ...field.RelationField) IUserMetumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userMetumDo) FirstOrInit() (*model.UserMetum, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMetum), nil
	}
}

func (u userMetumDo) FirstOrCreate() (*model.UserMetum, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMetum), nil
	}
}

func (u userMetumDo) FindByPage(offset int, limit int) (result []*model.UserMetum, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userMetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userMetumDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userMetumDo) Delete(models ...*model.UserMetum) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userMetumDo) withDO(do gen.Dao) *userMetumDo {
	u.DO = *do.(*gen.DO)
	return u
}
