// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"MVC_DI/section/user/model"
)

func newUserEncrypt(db *gorm.DB, opts ...gen.DOOption) userEncrypt {
	_userEncrypt := userEncrypt{}

	_userEncrypt.userEncryptDo.UseDB(db, opts...)
	_userEncrypt.userEncryptDo.UseModel(&model.UserEncrypt{})

	tableName := _userEncrypt.userEncryptDo.TableName()
	_userEncrypt.ALL = field.NewAsterisk(tableName)
	_userEncrypt.ID = field.NewInt64(tableName, "id")
	_userEncrypt.PubKey = field.NewString(tableName, "pub_key")

	_userEncrypt.fillFieldMap()

	return _userEncrypt
}

type userEncrypt struct {
	userEncryptDo

	ALL    field.Asterisk
	ID     field.Int64
	PubKey field.String // generated by RSA, base64 encoded

	fieldMap map[string]field.Expr
}

func (u userEncrypt) Table(newTableName string) *userEncrypt {
	u.userEncryptDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEncrypt) As(alias string) *userEncrypt {
	u.userEncryptDo.DO = *(u.userEncryptDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEncrypt) updateTableName(table string) *userEncrypt {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.PubKey = field.NewString(table, "pub_key")

	u.fillFieldMap()

	return u
}

func (u *userEncrypt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEncrypt) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["id"] = u.ID
	u.fieldMap["pub_key"] = u.PubKey
}

func (u userEncrypt) clone(db *gorm.DB) userEncrypt {
	u.userEncryptDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEncrypt) replaceDB(db *gorm.DB) userEncrypt {
	u.userEncryptDo.ReplaceDB(db)
	return u
}

type userEncryptDo struct{ gen.DO }

type IUserEncryptDo interface {
	gen.SubQuery
	Debug() IUserEncryptDo
	WithContext(ctx context.Context) IUserEncryptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEncryptDo
	WriteDB() IUserEncryptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEncryptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEncryptDo
	Not(conds ...gen.Condition) IUserEncryptDo
	Or(conds ...gen.Condition) IUserEncryptDo
	Select(conds ...field.Expr) IUserEncryptDo
	Where(conds ...gen.Condition) IUserEncryptDo
	Order(conds ...field.Expr) IUserEncryptDo
	Distinct(cols ...field.Expr) IUserEncryptDo
	Omit(cols ...field.Expr) IUserEncryptDo
	Join(table schema.Tabler, on ...field.Expr) IUserEncryptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEncryptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEncryptDo
	Group(cols ...field.Expr) IUserEncryptDo
	Having(conds ...gen.Condition) IUserEncryptDo
	Limit(limit int) IUserEncryptDo
	Offset(offset int) IUserEncryptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEncryptDo
	Unscoped() IUserEncryptDo
	Create(values ...*model.UserEncrypt) error
	CreateInBatches(values []*model.UserEncrypt, batchSize int) error
	Save(values ...*model.UserEncrypt) error
	First() (*model.UserEncrypt, error)
	Take() (*model.UserEncrypt, error)
	Last() (*model.UserEncrypt, error)
	Find() ([]*model.UserEncrypt, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEncrypt, err error)
	FindInBatches(result *[]*model.UserEncrypt, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEncrypt) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEncryptDo
	Assign(attrs ...field.AssignExpr) IUserEncryptDo
	Joins(fields ...field.RelationField) IUserEncryptDo
	Preload(fields ...field.RelationField) IUserEncryptDo
	FirstOrInit() (*model.UserEncrypt, error)
	FirstOrCreate() (*model.UserEncrypt, error)
	FindByPage(offset int, limit int) (result []*model.UserEncrypt, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEncryptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEncryptDo) Debug() IUserEncryptDo {
	return u.withDO(u.DO.Debug())
}

func (u userEncryptDo) WithContext(ctx context.Context) IUserEncryptDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEncryptDo) ReadDB() IUserEncryptDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEncryptDo) WriteDB() IUserEncryptDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEncryptDo) Session(config *gorm.Session) IUserEncryptDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEncryptDo) Clauses(conds ...clause.Expression) IUserEncryptDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEncryptDo) Returning(value interface{}, columns ...string) IUserEncryptDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEncryptDo) Not(conds ...gen.Condition) IUserEncryptDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEncryptDo) Or(conds ...gen.Condition) IUserEncryptDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEncryptDo) Select(conds ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEncryptDo) Where(conds ...gen.Condition) IUserEncryptDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEncryptDo) Order(conds ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEncryptDo) Distinct(cols ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEncryptDo) Omit(cols ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEncryptDo) Join(table schema.Tabler, on ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEncryptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEncryptDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEncryptDo) Group(cols ...field.Expr) IUserEncryptDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEncryptDo) Having(conds ...gen.Condition) IUserEncryptDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEncryptDo) Limit(limit int) IUserEncryptDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEncryptDo) Offset(offset int) IUserEncryptDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEncryptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEncryptDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEncryptDo) Unscoped() IUserEncryptDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEncryptDo) Create(values ...*model.UserEncrypt) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEncryptDo) CreateInBatches(values []*model.UserEncrypt, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEncryptDo) Save(values ...*model.UserEncrypt) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEncryptDo) First() (*model.UserEncrypt, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEncrypt), nil
	}
}

func (u userEncryptDo) Take() (*model.UserEncrypt, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEncrypt), nil
	}
}

func (u userEncryptDo) Last() (*model.UserEncrypt, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEncrypt), nil
	}
}

func (u userEncryptDo) Find() ([]*model.UserEncrypt, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEncrypt), err
}

func (u userEncryptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEncrypt, err error) {
	buf := make([]*model.UserEncrypt, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEncryptDo) FindInBatches(result *[]*model.UserEncrypt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEncryptDo) Attrs(attrs ...field.AssignExpr) IUserEncryptDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEncryptDo) Assign(attrs ...field.AssignExpr) IUserEncryptDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEncryptDo) Joins(fields ...field.RelationField) IUserEncryptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEncryptDo) Preload(fields ...field.RelationField) IUserEncryptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEncryptDo) FirstOrInit() (*model.UserEncrypt, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEncrypt), nil
	}
}

func (u userEncryptDo) FirstOrCreate() (*model.UserEncrypt, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEncrypt), nil
	}
}

func (u userEncryptDo) FindByPage(offset int, limit int) (result []*model.UserEncrypt, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEncryptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEncryptDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEncryptDo) Delete(models ...*model.UserEncrypt) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEncryptDo) withDO(do gen.Dao) *userEncryptDo {
	u.DO = *do.(*gen.DO)
	return u
}
