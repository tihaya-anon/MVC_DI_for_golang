// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"MVC_DI/section/user/model"
)

func newUserAuth(db *gorm.DB, opts ...gen.DOOption) userAuth {
	_userAuth := userAuth{}

	_userAuth.userAuthDo.UseDB(db, opts...)
	_userAuth.userAuthDo.UseModel(&model.UserAuth{})

	tableName := _userAuth.userAuthDo.TableName()
	_userAuth.ALL = field.NewAsterisk(tableName)
	_userAuth.ID = field.NewInt64(tableName, "id")
	_userAuth.School = field.NewString(tableName, "school")
	_userAuth.Phone = field.NewString(tableName, "phone")
	_userAuth.Password = field.NewString(tableName, "password")

	_userAuth.fillFieldMap()

	return _userAuth
}

type userAuth struct {
	userAuthDo

	ALL      field.Asterisk
	ID       field.Int64
	School   field.String
	Phone    field.String
	Password field.String // encrypted by bcrypt, salting, 60

	fieldMap map[string]field.Expr
}

func (u userAuth) Table(newTableName string) *userAuth {
	u.userAuthDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAuth) As(alias string) *userAuth {
	u.userAuthDo.DO = *(u.userAuthDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAuth) updateTableName(table string) *userAuth {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.School = field.NewString(table, "school")
	u.Phone = field.NewString(table, "phone")
	u.Password = field.NewString(table, "password")

	u.fillFieldMap()

	return u
}

func (u *userAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAuth) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["school"] = u.School
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["password"] = u.Password
}

func (u userAuth) clone(db *gorm.DB) userAuth {
	u.userAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAuth) replaceDB(db *gorm.DB) userAuth {
	u.userAuthDo.ReplaceDB(db)
	return u
}

type userAuthDo struct{ gen.DO }

type IUserAuthDo interface {
	gen.SubQuery
	Debug() IUserAuthDo
	WithContext(ctx context.Context) IUserAuthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAuthDo
	WriteDB() IUserAuthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAuthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAuthDo
	Not(conds ...gen.Condition) IUserAuthDo
	Or(conds ...gen.Condition) IUserAuthDo
	Select(conds ...field.Expr) IUserAuthDo
	Where(conds ...gen.Condition) IUserAuthDo
	Order(conds ...field.Expr) IUserAuthDo
	Distinct(cols ...field.Expr) IUserAuthDo
	Omit(cols ...field.Expr) IUserAuthDo
	Join(table schema.Tabler, on ...field.Expr) IUserAuthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAuthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAuthDo
	Group(cols ...field.Expr) IUserAuthDo
	Having(conds ...gen.Condition) IUserAuthDo
	Limit(limit int) IUserAuthDo
	Offset(offset int) IUserAuthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAuthDo
	Unscoped() IUserAuthDo
	Create(values ...*model.UserAuth) error
	CreateInBatches(values []*model.UserAuth, batchSize int) error
	Save(values ...*model.UserAuth) error
	First() (*model.UserAuth, error)
	Take() (*model.UserAuth, error)
	Last() (*model.UserAuth, error)
	Find() ([]*model.UserAuth, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAuth, err error)
	FindInBatches(result *[]*model.UserAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAuth) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAuthDo
	Assign(attrs ...field.AssignExpr) IUserAuthDo
	Joins(fields ...field.RelationField) IUserAuthDo
	Preload(fields ...field.RelationField) IUserAuthDo
	FirstOrInit() (*model.UserAuth, error)
	FirstOrCreate() (*model.UserAuth, error)
	FindByPage(offset int, limit int) (result []*model.UserAuth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAuthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAuthDo) Debug() IUserAuthDo {
	return u.withDO(u.DO.Debug())
}

func (u userAuthDo) WithContext(ctx context.Context) IUserAuthDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAuthDo) ReadDB() IUserAuthDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAuthDo) WriteDB() IUserAuthDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAuthDo) Session(config *gorm.Session) IUserAuthDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAuthDo) Clauses(conds ...clause.Expression) IUserAuthDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAuthDo) Returning(value interface{}, columns ...string) IUserAuthDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAuthDo) Not(conds ...gen.Condition) IUserAuthDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAuthDo) Or(conds ...gen.Condition) IUserAuthDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAuthDo) Select(conds ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAuthDo) Where(conds ...gen.Condition) IUserAuthDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAuthDo) Order(conds ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAuthDo) Distinct(cols ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAuthDo) Omit(cols ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAuthDo) Join(table schema.Tabler, on ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAuthDo) Group(cols ...field.Expr) IUserAuthDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAuthDo) Having(conds ...gen.Condition) IUserAuthDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAuthDo) Limit(limit int) IUserAuthDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAuthDo) Offset(offset int) IUserAuthDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAuthDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAuthDo) Unscoped() IUserAuthDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAuthDo) Create(values ...*model.UserAuth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAuthDo) CreateInBatches(values []*model.UserAuth, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAuthDo) Save(values ...*model.UserAuth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAuthDo) First() (*model.UserAuth, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuth), nil
	}
}

func (u userAuthDo) Take() (*model.UserAuth, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuth), nil
	}
}

func (u userAuthDo) Last() (*model.UserAuth, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuth), nil
	}
}

func (u userAuthDo) Find() ([]*model.UserAuth, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAuth), err
}

func (u userAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAuth, err error) {
	buf := make([]*model.UserAuth, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAuthDo) FindInBatches(result *[]*model.UserAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAuthDo) Attrs(attrs ...field.AssignExpr) IUserAuthDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAuthDo) Assign(attrs ...field.AssignExpr) IUserAuthDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAuthDo) Joins(fields ...field.RelationField) IUserAuthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAuthDo) Preload(fields ...field.RelationField) IUserAuthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAuthDo) FirstOrInit() (*model.UserAuth, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuth), nil
	}
}

func (u userAuthDo) FirstOrCreate() (*model.UserAuth, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuth), nil
	}
}

func (u userAuthDo) FindByPage(offset int, limit int) (result []*model.UserAuth, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAuthDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAuthDo) Delete(models ...*model.UserAuth) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAuthDo) withDO(do gen.Dao) *userAuthDo {
	u.DO = *do.(*gen.DO)
	return u
}
